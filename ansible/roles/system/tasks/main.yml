---
- name: Create a config_path variable
  ansible.builtin.set_fact:
    config_path: "{{ '/boot/config.txt' if ansible_distribution_major_version|int <= 11 else '/boot/firmware/config.txt' }}"
    cmdline_path: "{{ '/boot/cmdline.txt' if ansible_distribution_major_version|int <= 11 else '/boot/firmware/cmdline.txt' }}"

- name: Check NOOBS
  ansible.builtin.command: cat {{ config_path }}
  register: config_txt
  changed_when: false
  tags:
    - touches_boot_partition

- name: Make sure we have proper framebuffer depth
  ansible.builtin.lineinfile:
    dest: "{{ config_path }}"
    regexp: ^framebuffer_depth=
    line: framebuffer_depth=32
  tags:
    - touches_boot_partition

- name: Fix framebuffer bug
  ansible.builtin.lineinfile:
    dest: "{{ config_path }}"
    regexp: ^framebuffer_ignore_alpha=
    line: framebuffer_ignore_alpha=1
  tags:
    - touches_boot_partition

- name: Add gpu_mem_256 in config.txt if it doesn't exist
  ansible.builtin.lineinfile:
    path: "{{ config_path }}"
    line: gpu_mem_256=96
  when: config_txt.stdout.find('gpu_mem_256') == -1
  tags:
    - touches_boot_partition

- name: Add gpu_mem_512 in config.txt if it doesn't exist
  ansible.builtin.lineinfile:
    path: "{{ config_path }}"
    line: gpu_mem_512=128
  when: config_txt.stdout.find('gpu_mem_512') == -1
  tags:
    - touches_boot_partition

- name: Add gpu_mem_1024 in config.txt if it doesn't exist
  ansible.builtin.lineinfile:
    path: "{{ config_path }}"
    line: gpu_mem_1024=196
  when: config_txt.stdout.find('gpu_mem_1024') == -1
  tags:
    - touches_boot_partition

- name: Add pi4 section in config.txt if it doesn't exist
  ansible.builtin.lineinfile:
    path: "{{ config_path }}"
    line: "\n[pi4]"
  when: config_txt.stdout.find('[pi4]') == -1

- name: Uncomment out the original dtoverlay config.
  ansible.builtin.replace:
    dest: "{{ config_path }}"
    regexp: '^#\s*(dtoverlay=vc4-kms-v3d)'
    replace: '\1'

- name: Remove the FKMS config for all devices.
  ansible.builtin.lineinfile:
    path: "{{ config_path }}"
    state: absent
    regexp: "^dtoverlay=vc4-fkms-v3d$"

- name: Backup kernel boot args
  ansible.builtin.copy:
    src: "{{ cmdline_path }}"
    dest: "{{ cmdline_path }}.orig"
    owner: root
    group: root
    mode: "0755"
    force: false
  tags:
    - touches_boot_partition

- name: Notice for cmdline.txt.orig file
  ansible.builtin.debug:
    msg: "Use cmdline.txt.orig for boot parameters (don't remove this file)"

- name: Copy cmdline.txt.orig to cmdline.txt
  ansible.builtin.copy:
    src: "{{ cmdline_path }}.orig"
    dest: "{{ cmdline_path }}"
    owner: root
    group: root
    mode: "0755"
    force: true
  when: config_txt.stdout.find('NOOBS') == -1
  tags:
    - touches_boot_partition

- name: For splash screen using Plymouth
  ansible.builtin.replace:
    dest: "{{ cmdline_path }}"
    regexp: (^(?!$)((?!splash).)*$)
    replace: \1 splash
  when: ansible_distribution_major_version|int >= 7

- name: Remove blinking cursor
  ansible.builtin.replace:
    dest: "{{ cmdline_path }}"
    regexp: (^(?!$)((?!vt.global_cursor_default=0).)*$)
    replace: \1 vt.global_cursor_default=0
  when: ansible_distribution_major_version|int >= 7
  tags:
    - touches_boot_partition

- name: Plymouth ignore serial consoles
  ansible.builtin.replace:
    dest: "{{ cmdline_path }}"
    regexp: (^(?!$)((?!plymouth.ignore-serial-consoles).)*$)
    replace: \1 plymouth.ignore-serial-consoles
  when: ansible_distribution_major_version|int >= 7
  tags:
    - touches_boot_partition

- name: Use Systemd as init and quiet boot process
  ansible.builtin.replace:
    dest: "{{ cmdline_path }}"
    regexp: (^(?!$)((?!quiet init=/lib/systemd/systemd).)*$)
    replace: \1 quiet init=/lib/systemd/systemd
  tags:
    - touches_boot_partition

- name: Set ethN/wlanN names for interfaces
  ansible.builtin.replace:
    dest: "{{ cmdline_path }}"
    regexp: (^(?!$)((?!net\.ifnames=0).)*$)
    replace: \1 net.ifnames=0
  tags:
    - touches_boot_partition

- name: Set cgroup_enable required by containerd for OOM
  ansible.builtin.replace:
    dest: "{{ cmdline_path }}"
    regexp: (^(?!$)((?!cgroup_enable=memory).)*$)
    replace: \1 cgroup_enable=memory
  when: ansible_distribution_major_version|int >= 7
  tags:
    - touches_boot_partition

- name: Set cgroup_memory required by containerd for OOM
  ansible.builtin.replace:
    dest: "{{ cmdline_path }}"
    regexp: (^(?!$)((?!cgroup_memory=1).)*$)
    replace: \1 cgroup_memory=1
  when: ansible_distribution_major_version|int >= 7
  tags:
    - touches_boot_partition

# Sometimes in some packages there are no necessary files.
# They are required to install pip dependencies.
# In this case we need to reinstall the packages.
- name: Check if cdefs.h exists
  ansible.builtin.stat:
    path: /usr/include/arm-linux-gnueabihf/sys/cdefs.h
  register: cdefs

- name: Set fact for cdefs
  ansible.builtin.set_fact:
    cdefs_exist: "{{ cdefs.stat.exists }}"

- name: Remove libc6-dev
  ansible.builtin.apt:
    name: libc6-dev
    state: absent
  when: not cdefs_exist

- name: Install libc6-dev
  ansible.builtin.apt:
    name: libc6-dev
    state: present
    update_cache: true
  when: not cdefs_exist

- name: Install Anthias dependencies
  ansible.builtin.apt:
    name:
      - rpi-update
      - bc
      - python3
      - python3-redis
    state: present

- name: Remove deprecated apt dependencies
  ansible.builtin.apt:
    name:
      - dphys-swapfile
      - lightdm
      - lightdm-gtk-greeter
      - matchbox
      - nginx-common
      - nginx-light
      - pix-plym-splash
      - rabbitmq-server
      - redis-server
      - supervisor
      - uzbl
      - x11-xserver-utils
      - xserver-xorg
    state: absent

- name: Make sure distro package of Docker is absent
  ansible.builtin.apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
      - docker-compose
    state: absent

- name: Add docker apt key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/raspbian/gpg
    state: present

- name: Get raspbian name
  ansible.builtin.command: lsb_release -cs
  register: raspbian_name
  changed_when: false

- name: Add Docker repo
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d/docker.list
    create: true
    line: "deb [arch=armhf] https://download.docker.com/linux/debian {{ raspbian_name.stdout }} stable"
    state: present
    owner: root
    group: root
    mode: "0644"

- name: Install Docker
  ansible.builtin.apt:
    name:
      - docker-ce:armhf
      - docker-ce-cli:armhf
      - docker-compose-plugin:armhf
    update_cache: true
    install_recommends: false

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    groups:
      - docker
      - adm
      - sudo
      - video
      - plugdev
      - users
      - input
      - netdev
      - gpio
      - dialout

- name: Perform system upgrade
  ansible.builtin.apt:
    upgrade: dist
  tags:
    - system-upgrade

- name: Clean up unused packages
  ansible.builtin.apt:
    autoremove: true
  tags:
    - system-upgrade

- name: Remove deprecated pip dependencies (<= Debian 11)
  ansible.builtin.pip:
    name: supervisor
    state: absent
  when:
    - ansible_distribution_major_version|int <= 11

- name: Remove deprecated pip dependencies (>= Debian 12)
  ansible.builtin.pip:
    name: supervisor
    executable: /home/{{ lookup('env', 'USER') }}/installer_venv/bin/pip
    state: absent
  when:
    - ansible_distribution_major_version|int >= 12

- name: Copy in rc.local
  ansible.builtin.copy:
    src: rc.local
    dest: /etc/rc.local
    mode: "0755"
    owner: root
    group: root

- name: Copy in 01_nodoc
  ansible.builtin.copy:
    src: 01_nodoc
    dest: /etc/dpkg/dpkg.cfg.d/01_nodoc
    mode: "0644"
    owner: root
    group: root

- name: Disable swap
  ansible.builtin.command: /sbin/swapoff --all removes=/var/swap

- name: Remove swapfile from disk
  ansible.builtin.file:
    path: /var/swap
    state: absent
