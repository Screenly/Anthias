name: Docker Image Build

on:
  push:
    branches:
      - master
      - production
    paths-ignore:
      - 'webview/**'
      - '.github/workflows/build-webview.yaml'
      - README.md
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare the test environment.
        run: |
          mkdir -p ~/.screenly ~/.config/uzbl/ ~/screenly_assets /tmp/USB/cleanup_folder
          curl https://www.screenly.io/upload/ose-logo.png > /tmp/image.png
          cp /tmp/image.png /tmp/USB/image.png
          cp /tmp/image.png /tmp/USB/cleanup_folder/image.png
          cp tests/config/ffserver.conf /etc/ffserver.conf
          python server.py &
          server_pid=$!
          sleep 3

      - name: Run the unit tests.
        run: |
          find . ! -path "*/rtmplite/*" -name \*.py -exec pep8 --ignore=E402,E501,E731 {} +
          nosetests -v -a '!fixme'

  buildx:
    needs: test
    strategy:
      matrix:
        board: ['pi1', 'pi2', 'pi3', 'pi4']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.board }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.board }}

      - name: Login to DockerHub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tweak base image and target based on board
        run: |
          # Logic for Raspberry Pi 1
          if [ "${{ matrix.board }}" == 'pi1' ]; then
            sed -i 's/balenalib\/raspberrypi3/balenalib\/raspberry-pi/' \
              docker/Dockerfile.base
            sed -i 's/balenalib\/raspberrypi3/balenalib\/raspberry-pi/' \
              docker/Dockerfile.viewer
            echo 'TARGET_PLATFORM=linux/arm/v6' >> $GITHUB_ENV

          # Logic for Raspberry Pi 2
          elif [ "${{ matrix.board }}" == 'pi2' ]; then
            sed -i 's/balenalib\/raspberrypi3/balenalib\/raspberry-pi2/' \
              docker/Dockerfile.base
            sed -i 's/balenalib\/raspberrypi3/balenalib\/raspberry-pi2/' \
              docker/Dockerfile.viewer
            echo 'TARGET_PLATFORM=linux/arm/v6' >> $GITHUB_ENV

          # We use the same target for Pi 3 and Pi 4 for now.
          else
            echo 'TARGET_PLATFORM=linux/arm/v7' >> $GITHUB_ENV
          fi

      - name: Set Docker tag
        run: |
          # Apply the correct docker tag based on branch
          if [ "$GITHUB_REF_NAME" == 'master' ]; then
             export "DOCKER_TAG=latest-${{ matrix.board }}";
          elif [ "$GITHUB_REF_NAME" == 'production' ]; then
             export "DOCKER_TAG=production-${{ matrix.board }}";
          fi
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
          echo "GIT_SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set buildx args
        id: buildx-args
        run: |
          # Define the build arguments
          echo ::set-output name=buildx_args::\
            --platform "$TARGET_PLATFORM" \
            --output "type=image,push=true" \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --build-arg "PI_VERSION=${{ matrix.board }}" \
            --build-arg "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --build-arg "GIT_HASH=$GITHUB_SHA" \
            --build-arg "GIT_SHORT_HASH=$GIT_SHORT_HASH" \
            --build-arg "GIT_BRANCH=$GITHUB_REF_NAME"


      - name: Building containers
        run: |
          for container in base server celery redis websocket nginx viewer; do
            echo "Building container $container"
            docker buildx build \
              ${{ steps.buildx-args.outputs.buildx_args }} \
              -f "docker/Dockerfile.$container" \
              -t "screenly/srly-ose-$container:$GIT_SHORT_HASH-${{ matrix.board }}" \
              -t "screenly/srly-ose-$container:$DOCKER_TAG" .
          done

  balena:
    needs: buildx
    strategy:
      matrix:
        board: ['pi1', 'pi2', 'pi3', 'pi4']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Docker tag
        run: |
          echo "GIT_SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Prepare Balena file
        run: |
          # Generage a docker-compose file for Balena with the correct board
          mkdir -p balena-deploy
          cat docker-compose.balena.yml | \
            sed "s/BOARD_TAG/$GIT_SHORT_HASH-${{ matrix.board }}/" \
            > balena-deploy/docker-compose.yml

      - uses: balena-io/deploy-to-balena-action@master
        id: build
        with:
          balena_token: ${{ secrets.BALENA_TOKEN }}
          fleet: screenly2/ose-${{ matrix.board }}
          source: balena-deploy
