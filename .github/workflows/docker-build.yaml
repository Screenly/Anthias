name: Docker Image Build

on:
  push:
    branches:
      - master
    paths:
      - '**'
      - '!webview/**'
      - '!website/**'
      - '!.github/workflows/deploy-website.yaml'
      - '!.github/workflows/build-webview.yaml'
      - '!.github/workflows/build-balena-disk-image.yaml'
      - '!.github/workflows/python-lint.yaml'
      - '!.github/pull_request_template.md'
      - '!README.md'
      - '!docs/**'
      - '!bin/install.sh'
      - '!bin/upgrade_containers.sh'
      - '!bin/start_development_server.sh'
      - '!tests/**'
      - '!docker/Dockerfile.dev'

jobs:
  run-tests:
    uses: ./.github/workflows/docker-test.yaml

  buildx:
    needs: run-tests
    strategy:
      matrix:
        board: ['pi1', 'pi2', 'pi3', 'pi4', 'pi4-64', 'pi5', 'x86']
        python-version: ["3.11"]
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.venv
          installer-parallel: true

      - name: Install dependencies
        run: |
          poetry install --only=docker-image-builder

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Create and use dedicated builder
        run: |
          docker buildx create --use --name multiarch-builder
          docker buildx inspect --bootstrap

      - name: Cache Docker layers
        uses: actions/cache@v4
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.board }}
          key: buildx-${{ matrix.board }}-${{ hashFiles('docker/**/*') }}
          restore-keys: |
            buildx-${{ matrix.board }}-

      - name: Inspect cache before build
        run: |
          ls -la /tmp/.buildx-cache/${{ matrix.board }} || true

      - name: Login to Docker Hub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Containers
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain
        run: |
          if [ "${{ matrix.board }}" == "pi4" ]; then
            poetry run python -m tools.image_builder \
              --build-target=pi4 \
              --target-platform=linux/arm/v8 \
              --push
          elif [ "${{ matrix.board }}" == "pi4-64" ]; then
            poetry run python -m tools.image_builder \
              --build-target=pi4 \
              --target-platform=linux/arm64/v8 \
              --push
          else
            poetry run python -m tools.image_builder \
              --build-target=${{ matrix.board }} \
              --push
          fi

      - name: Inspect cache after build
        run: |
          ls -la /tmp/.buildx-cache/${{ matrix.board }} || true

  balena:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: buildx
    strategy:
      matrix:
        board: ['pi1', 'pi2', 'pi3', 'pi4', 'pi5']
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Docker tag
        run: |
          echo "GIT_SHORT_HASH=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

          if [ "${{ matrix.board }}" == "pi4" ]; then
            echo "BOARD=${{ matrix.board }}-64" >> "$GITHUB_ENV"
          else
            echo "BOARD=${{ matrix.board }}" >> "$GITHUB_ENV"
          fi

          echo "SHM_SIZE=256mb" >> "$GITHUB_ENV"

      - name: Prepare Balena file
        run: |
          # Generate a docker-compose file for Balena with the correct board
          mkdir -p balena-deploy

          # Copy in the Balena yaml file
          cp balena.yml balena-deploy/

          # Generate the docker-compose file
          envsubst < docker-compose.balena.yml.tmpl > balena-deploy/docker-compose.yml

          # Remove bind mounts to `/dev/vchiq` for Raspberry Pi 5
          if [ "${{ matrix.board }}" == "pi5" ]; then
            sed -i '/devices:/ {N; /\n.*\/dev\/vchiq:\/dev\/vchiq/d}' \
              balena-deploy/docker-compose.yml
          fi

      - uses: balena-io/deploy-to-balena-action@master
        id: build
        continue-on-error: true
        with:
          balena_token: ${{ secrets.BALENA_TOKEN }}
          fleet: screenly_ose/anthias-${{ matrix.board }}
          source: balena-deploy

      - name: Sleep random sleep before retry
        if: ${{ failure() && steps.build.conclusion == 'failure' }}
        run: |
          sleep $((120 + RANDOM % 900));

      # Balena deploy often fails with 'ESOCKETTIMEDOUT'.
      # This adds some retry logic.
      - uses: balena-io/deploy-to-balena-action@master
        id: build-retry
        if: ${{ failure() && steps.build.conclusion == 'failure' }}
        with:
          balena_token: ${{ secrets.BALENA_TOKEN }}
          fleet: screenly_ose/anthias-${{ matrix.board }}
          source: balena-deploy
