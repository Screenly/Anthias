name: Build Balena Disk Images
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to be used for the release'
        required: true
        type: string
      commit:
        description: 'Commit or branch name'
        required: false
        type: string
        default: 'master'
      docker-tag:
        description: 'Docker tag to be used for the release'
        required: true
        type: string

jobs:
  create-docker-tag-file:
    runs-on: ubuntu-24.04
    steps:
      - name: Create docker tag file
        run: |
          echo ${{ inputs.docker-tag }} > docker-tag
      - name: Upload docker tag file
        uses: actions/upload-artifact@v4
        with:
          name: docker-tag
          path: docker-tag

  generate-openapi-schema:
    uses: ./.github/workflows/generate-openapi-schema.yml
    permissions:
      contents: write

  balena-build-images:
    strategy:
      matrix:
        board: ['pi1', 'pi2', 'pi3', 'pi4', 'pi5']
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install zstd
        run: |
          sudo apt-get update
          sudo apt-get install -y zstd

      - name: Get base board
        run: |
          if [ "${{ matrix.board }}" == 'pi1' ]; then
            echo "BALENA_IMAGE=raspberry-pi" >> "$GITHUB_ENV"
          elif [ "${{ matrix.board }}" == 'pi2' ]; then
            echo "BALENA_IMAGE=raspberry-pi2" >> "$GITHUB_ENV"
          elif [ "${{ matrix.board }}" == 'pi3' ]; then
            echo "BALENA_IMAGE=raspberrypi3" >> "$GITHUB_ENV"
          elif [ "${{ matrix.board }}" == 'pi4' ]; then
            echo "BALENA_IMAGE=raspberrypi4-64" >> "$GITHUB_ENV"
          elif [ "${{ matrix.board }}" == 'pi5' ]; then
            echo "BALENA_IMAGE=raspberrypi5" >> "$GITHUB_ENV"
          fi

      - name: balena CLI Action - download
        uses: balena-labs-research/community-cli-action@1.0.0
        with:
          balena_token: ${{secrets.BALENA_TOKEN}}
          balena_cli_commands: |
            os download "$BALENA_IMAGE" \
              --output "$BALENA_IMAGE.img" \
              --version default
          balena_cli_version: 18.1.2

      - name: balena CLI Action - preload
        uses: balena-labs-research/community-cli-action@1.0.0
        with:
          balena_token: ${{secrets.BALENA_TOKEN}}
          balena_cli_commands: |
            preload \
              "$BALENA_IMAGE.img" \
              --fleet screenly_ose/anthias-${{ matrix.board }} \
              --pin-device-to-release \
              --splash-image ansible/roles/splashscreen/files/splashscreen.png \
              --commit latest
          balena_cli_version: 18.1.2

      - name: balena CLI Action - configure
        uses: balena-labs-research/community-cli-action@1.0.0
        with:
          balena_token: ${{secrets.BALENA_TOKEN}}
          balena_cli_commands: |
            os configure \
              "$BALENA_IMAGE.img" \
              --config-network=ethernet  \
              --fleet screenly_ose/anthias-${{ matrix.board }}
          balena_cli_version: 18.1.2

      - name: Package up image
        run: |
          sha256sum "$BALENA_IMAGE.img" >> "$(date -I)-$BALENA_IMAGE.sha256"
          zstd -19 -T0 "$BALENA_IMAGE.img" -o "$(date -I)-$BALENA_IMAGE.img.zst"
          sha256sum "$(date -I)-$BALENA_IMAGE.img.zst" >> \
            "$(date -I)-$BALENA_IMAGE.sha256"

          # Build Raspberry Pi Imager metadata
          jq --null-input \
            --arg BOARD "${{ matrix.board }}" \
            --arg IMAGE_SHA256 "$(sha256sum "$BALENA_IMAGE.img" | cut -d ' ' -f 1)" \
            --arg IMAGE_SIZE "$(wc -c < "$BALENA_IMAGE.img" | xargs)" \
            --arg DOWNLOAD_SHA256 "$(sha256sum "$(date -I)-$BALENA_IMAGE.img.zst" | cut -d ' ' -f 1)" \
            --arg DOWNLOAD_SIZE "$(wc -c < "$(date -I)-$BALENA_IMAGE.img.zst" | xargs)" \
            --arg RELEASE_DATE "$(date -I)" \
            '{
              "name": ("Anthias (" + $BOARD + ")"),
              "description": "Anthias, formerly known as Screenly OSE, is the most popular open source digital signage project in the world.",
              "icon": "https://raw.githubusercontent.com/Screenly/Anthias/master/static/img/square-dark.svg",
              "website": "https://anthias.screenly.io",
              "extract_size": $IMAGE_SIZE,
              "extract_sha256": $IMAGE_SHA256,
              "image_download_size": $DOWNLOAD_SIZE,
              "image_download_sha256": $DOWNLOAD_SHA256,
              "release_date": $RELEASE_DATE
            }' > "$(date -I)-$BALENA_IMAGE.json"

      - name: List files before upload
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Files matching pattern:"
          ls -la ./*raspberry*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: balena-images-${{ matrix.board }}
          path: |
            ./*raspberry*.img.zst
            ./*raspberry*.sha256
            ./*raspberry*.json

      - name: Attest
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: '${{ github.workspace }}/*raspberry*.img.zst'

  create-release:
    needs: [create-docker-tag-file, generate-openapi-schema, balena-build-images]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Download docker tag
        uses: actions/download-artifact@v4
        with:
          name: docker-tag
          path: .

      - name: Download OpenAPI schema
        uses: actions/download-artifact@v4
        with:
          name: anthias-api-schema
          path: .

      - name: Download balena images
        uses: actions/download-artifact@v4
        with:
          pattern: balena-images-*
          path: .
          merge-multiple: true

      # nico start - debug
      - name: List files
        run: |
          ls -la

      - name: Print contents of docker-tag
        run: |
          cat docker-tag

      - name: Print contents of anthias-api-schema.json
        run: |
          cat anthias-api-schema.json
      # nico end

      # nico start - debug
      # - name: Create release
      #   uses: ncipollo/release-action@v1.11.2
      #   with:
      #     allowUpdates: true
      #     generateReleaseNotes: true
      #     prerelease: true
      #     artifacts: "docker-tag,*raspberry*.img.zst,*raspberry*.sha256,*raspberry*.json"
      #     tag: ${{ inputs.tag }}
      #     commit: ${{ inputs.commit }}
      # nico end
