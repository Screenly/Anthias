// Generated by CoffeeScript 1.9.3
(function() {
  $().ready(function() {
    var end_date, end_date_usb_file, start_date, start_date_usb_file, toggle_chunk;
    $("#request-error .close").click(function(e) {
      return $("#request-error .alert").hide();
    });
    $("#btn-backup").click(function(e) {
      var btnText;
      btnText = $("#btn-backup").text();
      $("#btn-backup").text("Preparing archive...");
      $("#btn-upload").prop("disabled", true);
      $("#btn-backup").prop("disabled", true);
      return $.ajax({
        method: "POST",
        url: "api/v1/backup",
        timeout: 1800 * 1000
      }).done(function(data, e) {
        if (data) {
          return window.location = "static_with_mime/" + data + "?mime=application/x-tgz";
        }
      }).fail(function(data, e) {
        var err, j;
        $("#request-error .alert").addClass("alert-danger");
        $("#request-error .alert").removeClass("alert-success");
        $("#request-error .alert").show();
        if ((data.responseText !== "") && (j = $.parseJSON(data.responseText)) && (err = j.error)) {
          return ($("#request-error .msg")).text("Server Error: " + err);
        } else {
          return ($("#request-error .msg")).text("The operation failed. Please reload the page and try again.");
        }
      }).always(function(data, e) {
        $("#btn-backup").text(btnText);
        $("#btn-upload").prop("disabled", false);
        return $("#btn-backup").prop("disabled", false);
      });
    });
    $("#btn-upload").click(function(e) {
      e.preventDefault();
      return $("[name='backup_upload']").click();
    });
    $("[name='backup_upload']").fileupload({
      url: "api/v1/recover",
      progressall: function(e, data) {
        var valuenow;
        if (data.loaded && data.total) {
          valuenow = data.loaded / data.total * 100;
          $(".progress .bar").css("width", valuenow + "%");
          return $(".progress .bar").text("Uploading: " + Math.floor(valuenow) + "%");
        }
      },
      add: function(e, data) {
        $("#btn-upload").hide();
        $("#btn-backup").hide();
        $(".progress").show();
        return data.submit();
      },
      done: function(e, data) {
        var message;
        if ((data.jqXHR.responseText !== "") && (message = $.parseJSON(data.jqXHR.responseText))) {
          $("#request-error .alert").show();
          $("#request-error .alert").addClass("alert-success");
          $("#request-error .alert").removeClass("alert-danger");
          return ($("#request-error .msg")).text(message);
        }
      },
      fail: function(e, data) {
        var err, j;
        $("#request-error .alert").show();
        $("#request-error .alert").addClass("alert-danger");
        $("#request-error .alert").removeClass("alert-success");
        if ((data.jqXHR.responseText !== "") && (j = $.parseJSON(data.jqXHR.responseText)) && (err = j.error)) {
          return ($("#request-error .msg")).text("Server Error: " + err);
        } else {
          return ($("#request-error .msg")).text("The operation failed. Please reload the page and try again.");
        }
      },
      always: function(e, data) {
        $(".progress").hide();
        $("#btn-upload").show();
        return $("#btn-backup").show();
      }
    });
    $("#btn-reset").click(function(e) {
      if (confirm("Are you sure you want to reset your wifi configuration?")) {
        return $.get("/api/v1/reset_wifi").done(function(e) {
          $("#request-error .alert").show();
          $("#request-error .alert").addClass("alert-success");
          $("#request-error .alert").removeClass("alert-danger");
          return ($("#request-error .msg")).text("Reset was successful. Please reboot the device.");
        }).error(function(e) {
          return document.location.reload();
        });
      }
    });
    start_date = new Date();
    start_date_usb_file = $("#view-usb-assets-file-modal [name='start_date_date']");
    start_date_usb_file.datepicker({
      autoclose: true,
      format: 'mm/dd/yyyy'
    });
    start_date_usb_file.datepicker('setDate', start_date);
    end_date = new Date(new Date().setDate(start_date.getDate() + 7));
    end_date_usb_file = $("#view-usb-assets-file-modal [name='end_date_date']");
    end_date_usb_file.datepicker({
      autoclose: true,
      format: 'mm/dd/yyyy'
    });
    end_date_usb_file.datepicker('setDate', end_date);
    $("#btn-view-usb-assets-file").click(function(e) {
      return $("#view-usb-assets-file-modal").modal("show");
    });
    $("#close-view-usb-assets-file-btn").click(function(e) {
      return $("#view-usb-assets-file-modal").modal("hide");
    });
    $("#generate-usb-assets-key-btn").click(function(e) {
      return $.get("/api/v1/generate_usb_assets_key").done(function(data, e) {
        if (data) {
          return $("#usb-assets-key-badge").val(data);
        }
      });
    });
    $("#btn-download-usb-assets-key").click(function(e) {
      var blob, elem, filename, text;
      filename = "usb_assets_key.yaml";
      text = "screenly:\r\n";
      text += "  key: \"" + (($("#usb-assets-key-badge")).val().trim()) + "\"\r\n";
      text += "  activate: " + (Boolean($("input[name=\"activate_assets\"]").prop("checked"))) + "\r\n";
      text += "  copy: " + (Boolean($("input[name=\"copy_assets\"]").prop("checked"))) + "\r\n";
      text += "  start_date: \"" + (start_date_usb_file.val()) + "\"\r\n";
      text += "  end_date: \"" + (end_date_usb_file.val()) + "\"\r\n";
      text += "  duration: " + ($("input[name=\"duration\"]").val());
      blob = new Blob([text], {
        type: 'text/csv'
      });
      if (window.navigator.msSaveOrOpenBlob) {
        return window.navigator.msSaveBlob(blob, filename);
      } else {
        elem = window.document.createElement('a');
        elem.href = window.URL.createObjectURL(blob);
        elem.download = filename;
        document.body.appendChild(elem);
        elem.click();
        return document.body.removeChild(elem);
      }
    });
    $("#btn-upgrade").click(function(e) {
      return $("#upgrade-modal").modal("show");
    });
    $("#close-upgrade-btn").click(function(e) {
      return $("#upgrade-modal").modal("hide");
    });
    $("#start-upgrade-btn").click(function(e) {
      $("#start-upgrade-btn").prop("disabled", true);
      ($("#upgrade_logs")).text("");
      return $.post("api/v1/upgrade_screenly", {
        "branch": $("#branch-group-radio input:radio:checked").val(),
        "manage_network": $("input:checkbox[name='manage_network']").is(":checked"),
        "system_upgrade": $("input:checkbox[name='system_upgrade']").is(":checked")
      }).done(function(data, e) {
        var getStatus;
        getStatus = function(id) {
          return $.get("/upgrade_status/" + id).done(function(data, e, jqXHR) {
            var scrollToBottom;
            if (data.status) {
              scrollToBottom = ($("#upgrade_logs")).scrollTop() + ($("#upgrade_logs")).outerHeight() === ($("#upgrade_logs")).prop("scrollHeight");
              ($("#upgrade_logs")).text(data.status);
              if (scrollToBottom) {
                ($("#upgrade_logs")).scrollTop(($("#upgrade_logs")).prop("scrollHeight"));
              }
            }
            if (jqXHR.status === 202) {
              return setTimeout(function() {
                return getStatus(id);
              }, 1000);
            } else {
              ($("#upgrade_logs")).append("\nScreenly-OSE update was finished");
              ($("#upgrade_logs")).scrollTop(($("#upgrade_logs")).prop("scrollHeight"));
              window.onbeforeunload = null;
              return $("#start-upgrade-btn").prop("disabled", false);
            }
          }).fail(function(data, e) {
            var err, j;
            if ((data.responseText !== "") && (j = $.parseJSON(data.responseText)) && (err = j.error)) {
              return ($("#upgrade_logs")).append("Server Error: " + err);
            } else {
              return ($("#upgrade_logs")).append("The operation failed. Please reload the page and try again.");
            }
          });
        };
        ($("#upgrade_logs")).text("Screenly-OSE upgrade has started successfully.");
        window.onbeforeunload = function() {
          return false;
        };
        return getStatus(data.id);
      }).fail(function(data, e) {
        var err, j;
        if ((data.responseText !== "") && (j = $.parseJSON(data.responseText)) && (err = j.error)) {
          ($("#upgrade_logs")).append("Server Error: " + err);
        } else {
          ($("#upgrade_logs")).append("The operation failed. Please reload the page and try again.");
        }
        return $("#start-upgrade-btn").prop("disabled", false);
      });
    });
    $("#btn-reboot-system").click(function(e) {
      if (confirm("Are you sure you want to reboot your Screenly?")) {
        return $.post("/api/v1/reboot_screenly").done(function(e) {
          ($("#request-error .alert")).show();
          ($("#request-error .alert")).addClass("alert-success");
          ($("#request-error .alert")).removeClass("alert-danger");
          return ($("#request-error .msg")).text("Screenly reboot has started successfully.");
        }).fail(function(data, e) {
          var err, j;
          ($("#request-error .alert")).show();
          ($("#request-error .alert")).addClass("alert-danger");
          ($("#request-error .alert")).removeClass("alert-success");
          if ((data.responseText !== "") && (j = $.parseJSON(data.responseText)) && (err = j.error)) {
            return ($("#request-error .msg")).text("Server Error: " + err);
          } else {
            return ($("#request-error .msg")).text("The operation failed. Please reload the page and try again.");
          }
        });
      }
    });
    $("#btn-shutdown-system").click(function(e) {
      if (confirm("Are you sure you want to shutdown your Screenly?")) {
        return $.post("/api/v1/shutdown_screenly").done(function(e) {
          ($("#request-error .alert")).show();
          ($("#request-error .alert")).addClass("alert-success");
          ($("#request-error .alert")).removeClass("alert-danger");
          return ($("#request-error .msg")).text("Screenly shutdown has started successfully. Soon you will be able to unplug the power from your Raspberry Pi.");
        }).fail(function(data, e) {
          var err, j;
          ($("#request-error .alert")).show();
          ($("#request-error .alert")).addClass("alert-danger");
          ($("#request-error .alert")).removeClass("alert-success");
          if ((data.responseText !== "") && (j = $.parseJSON(data.responseText)) && (err = j.error)) {
            return ($("#request-error .msg")).text("Server Error: " + err);
          } else {
            return ($("#request-error .msg")).text("The operation failed. Please reload the page and try again.");
          }
        });
      }
    });
    toggle_chunk = function() {
      $("[id^=auth_chunk]").hide();
      return $.each($('#auth_backend option'), function(e, t) {
        return $('#auth_backend-' + t.value).toggle($('#auth_backend').val() === t.value);
      });
    };
    $('#auth_backend').change(function(e) {
      return toggle_chunk();
    });
    return toggle_chunk();
  });

}).call(this);

//# sourceMappingURL=settings.js.map
